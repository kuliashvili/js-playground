# SQL Fundamentals

1. Database and Table Management

CREATE DATABASE database_name - Creates a new database
USE database_name - Switches to specific database
SHOW DATABASE - Lists all databases
SHOW TABLES - Lists all tables in the current database
DISCRIBE table_name or SHOW COLUMNS FROM table_name - Shows table structure
CREATE TABLE table_name - Creates a new table
INSERT INTO table_name (columns) VALUES (values) - Adds data to tables
SELECT * FROM table_name - Retrieves all data from a table

2. Creating Tables with proper structure (when creating tables, defining proper columns with data types is important)

CREATE TABLE student (
  id INT PRIMARY KEY AUTO_INCREMENT,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  age INT,
  enrollement_date DATE
);

Key concepts
1) Data types: INT, VARCHAR, DATE...
2) Constraints: PRIMARY_KEY, NOT NULL, UNIQUE...
3) AUTO_INCREMENT for automatic ID generation

3.Basic Query Operations

-- select specific columns
SELECT first_name, last_name FROM students;

-- filter data
SELECT * FROM students WHERE age > 18

-- sort data
SELECT * FROM students ORDER BY last_name ASC

--Limit results
SELECT * FROM students LIMIT 10

4.Data Manipulation

--update existing data
UPDATE students SET age = 19 WHERE id = 1

--delete data
DELETE FROM students WHERE id = 5

--Alter table structure
ALTER TABLE students ADD email VARCHAR(100)

5. Practical Exercise

--create database
CREATE DATABASE bookstore;
USE bookstore;

--create author table
CREATE TABLE authors (
  author_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  country VARCHAR(50)
);

--create books table
CREATE TABLE books (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(200) NOT NULL,
  author_id INT,
  publication_year INT,
  price DECIMAL(10,2),
  FOREIGN KEY (author_id) REFERENCES authors(author_id)
);

--insert sample data
INSERT INTO authors (name, country)
VALUES ('jon pork', 'Dagestan'),
       ('random name', 'italy');

INSERT INTO books (title, author_id, publication_year, price)
VALUES ('random random', 1, 1998, 19.99),
       ('random random', 2, 2005, 20.20);

--retrive data with conditions
SELECT books.title, authors.name FROM books
JOIN authors ON books.author_id = authors.author_id
WHERE publication_year > 1990;

6. SQL SELECT statement
SELECT * FROM students --Basic SELECT
SELECT first_name, last_name FROM students; --select specific columns
SELECT first_name, last_name, price * 0.9 AS discounted_price FROM books -- calculated columns

7. SELECT DISTINCT
SELECT DISTINCT country FROM authors; --unique countries of authors
SELECT DISTINCT publication_year, price FROM books -- unique combination of values

8. SQL WHERE clause (filtering data)
SELECT * FROM students WHERE age > 18; --basic WHERE filtering
SELECT * FROM books WHERE title = 'vefxistyaosani'; --filter by string
SELECT * FROM students WHERE enrollment_date > '2025-01-01' -- date comparison

9. SQL ORDER BY (sorting)
SELECT * FROM books ORDER BY price --sort in ascending order (default) by price
SELECT * FROM students ORDER BY age DESC; --sort in descending order
SELECT * FROM books ODER BY publication_year DESC, price ASC --multiple column sort

10.SQL AND, OR, NOT (logical operators)
SELECT * FROM books WHERE price > 10 AND publication_year > 2000 --AND operator
SELECT * FROM authors WHERE country = 'georgia' OR country = 'spain' --OR operator
SELECT * FROM books WHERE NOT publication_year = 2005; --NOT operator
SELECT * FROM books WHERE (publication_year > 2000 OR price > 15) AND title LIKE '%random%' --combining operators

11. SQL INSERT INTO (adding data)
INSERT INTO authors VALUES (3,'new author','georgia') --complete row insert
INSERT INTO authors(name, country) VALUES('name', 'spain') --insert specific columns
INSERT INTO books (title, author_id, publication_year, price)
VALUES ('Book One', 1, 2010, 12.99),
       ('Book Two', 1, 2015, 14.99),
       ('Book Three', 2, 2020, 19.99);             -- multiple row at once insert

12. SQL NULL values
SELECT * FROM books WHERE price IS NULL; -- rows with null values
SELECT * FROM authors WHERE country IS NOT NULL; -- rows without NULL values
UPDATE books SET publication_year = NULL WHERE book_id = 1; --set a column to NULL

13. SQL UPDATE ( Modifying data)
UPDATE books SET price = 25 WHERE book_id = 1; --update single column
UPDATE author SET name = 'gio kuliashvili', fav_color = 'purple', fav_food = 'khinkali' WHERE author_id = 5; --multiple
UPDATE books SET price = price * 1.1 WHERE publication_year > 2010; -- update with calculation

14. SQL DELETE (remove data)
DELETE FROM books WHERE book_id = 3; -- delete specific row
DELETE FROM books WHERE price < 10 -- delete based on condition 
DELETE FROM authors --delete all rows but keep table

15. LIMIT 
SELECT * FROM books LIMIT 5; --mySQL syntax
SELECT TOP 5 * FROM books; -- SQL server syntax

16. SQL Aggregate functions
SELECT COUNT(*) FROM books; --count function
SELECT COUNT(*) FROM books WHERE price IS NULL --count with condition
SELECT SUM(price) FROM books --sum function
SELECT AVG(price) FROM books; --avg price 
SELECT MIN(publication_year) FROM books --min function
SELECT MAX(price) FROM books --max function
SELECT author_id, COUNT(*) AS book_count, AVG(price) AS average_price FROM books GROUP BY author_id




















