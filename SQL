# SQL Fundamentals

1. Database and Table Management

CREATE DATABASE database_name - Creates a new database
USE database_name - Switches to specific database
SHOW DATABASE - Lists all databases
SHOW TABLES - Lists all tables in the current database
DISCRIBE table_name or SHOW COLUMNS FROM table_name - Shows table structure
CREATE TABLE table_name - Creates a new table
INSERT INTO table_name (columns) VALUES (values) - Adds data to tables
SELECT * FROM table_name - Retrieves all data from a table

2. Creating Tables with proper structure (when creating tables, defining proper columns with data types is important)

CREATE TABLE student (
  id INT PRIMARY KEY AUTO_INCREMENT,
  first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(50) NOT NULL,
  age INT,
  enrollement_date DATE
);

Key concepts
1) Data types: INT, VARCHAR, DATE...
2) Constraints: PRIMARY_KEY, NOT NULL, UNIQUE...
3) AUTO_INCREMENT for automatic ID generation

3.Basic Query Operations

-- select specific columns
SELECT first_name, last_name FROM students;

-- filter data
SELECT * FROM students WHERE age > 18

-- sort data
SELECT * FROM students ORDER BY last_name ASC

--Limit results
SELECT * FROM students LIMIT 10

4.Data Manipulation

--update existing data
UPDATE students SET age = 19 WHERE id = 1

--delete data
DELETE FROM students WHERE id = 5

--Alter table structure
ALTER TABLE students ADD email VARCHAR(100)

5. Practical Exercise

--create database
CREATE DATABASE bookstore;
USE bookstore;

--create author table
CREATE TABLE authors (
  author_id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  country VARCHAR(50)
);

--create books table
CREATE TABLE books (
  book_id INT PRIMARY KEY AUTO_INCREMENT,
  title VARCHAR(200) NOT NULL,
  author_id INT,
  publication_year INT,
  price DECIMAL(10,2),
  FOREIGN KEY (author_id) REFERENCES authors(author_id)
);

--insert sample data
INSERT INTO authors (name, country)
VALUES ('jon pork', 'Dagestan'),
       ('random name', 'italy');

INSERT INTO books (title, author_id, publication_year, price)
VALUES ('random random', 1, 1998, 19.99),
       ('random random', 2, 2005, 20.20);

--retrive data with conditions
SELECT books.title, authors.name FROM books
JOIN authors ON books.author_id = authors.author_id
WHERE publication_year > 1990;



